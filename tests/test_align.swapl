
import "control";

model "base_agent";

roleset ( { name: "leader" },
          { name: "follower" } );

agentset ( { name: "leader", role: "leader" },
           { spawn: 3, role: "follower" } );

environment ( { left: -120, top: -120, right: 120, bottom: 120, z_bottom : 0, z_top: 100 } );

var THRESHOLD = Math.pi / 6;


function line_for_point(m, x, y) {
    var q = y - m * x;
    return { m: m,  q: q};
}


function distance_from_line(line, x, y) {
    var num = Math.fabs(y - (line.m * x + line.q));
    var den = Math.sqrt(1 + line.m * line.m);
    return num / den;
}


behaviour main {

  with roles("leader") {
      agent.x = 0;
      agent.y = 0;
      agent.heading = 3.14159/4.0;
      agent.image = "arrow_red.png";
  }

  with roles("follower") {
    agent.x = Random.uniform(-100, 100);
    agent.y = Random.uniform(-100, 100);
    agent.heading = Random.uniform(-Math.pi, Math.pi);
  }

  with roles("leader") {
      #agent.v = 8;
      while (1) {
          wait(20);
          #agent.heading = normalize(Random.uniform(0, 2*3.14159));
      }
  }
  |
  with roles("follower") {
      var leaders = all.roles("leader");
      var leader = leaders[0];

      var k_hdg = 1.5;
      var heading_controller = instance pid_controller;
      heading_controller.make(k_hdg, 0, 0);

      var kp_v = 1.5;
      var ki_v = 0.1;
      var cohesion_controller = instance pid_controller;
      cohesion_controller.make(kp_v, 0, 0);
      cohesion_controller.set_saturation(10);

      while (1) {

          # rule 1.1 yaw alignment
          var align_difference = Math.angleNormalize(leader.heading - agent.heading);
          agent.w = heading_controller.evaluate_err(align_difference);

          # rule 1.2 formation line alignment
          var formation_line_hdg = Math.angleNormalize(leader.heading + Math.pi/2);
          var line = line_for_point(formation_line_hdg, leader.x, leader.y);
          var dist_from_line = distance_from_line(line, agent.x, agent.y);

          var dx = leader.x - agent.x;
          var dy = leader.y - agent.y;
          var hdg_difference = Math.angleNormalize(formation_line_hdg - Math.atan2(dy, dx));

          dist_from_line = dist_from_line * Math.sgn(hdg_difference);

          var v = 0;
          if (Math.fabs(align_difference) < THRESHOLD) {
              v = cohesion_controller.evaluate_err(dist_from_line);
              # cohesion_integral = cohesion_integral + dist_from_line;
              # v = kp_v * dist_from_line + ki_v * cohesion_integral;
              #v = Control.saturate(v, -10, 10);
          }
          agent.loc_vx = v;

          # rule 2 cohesion
          var left = all.but(agent).filter(
                                          function(ag) {
                                              var hdg = Math.angleNormalize(Math.atan2(ag.y - agent.y, ag.x - agent.x));
                                              if (hdg > Math.pi/2)
                                                  return true;
                                              else if (hdg < -Math.pi/2)
                                                  return true;
                                              else
                                                  return false;
                                          }
                                          );

          var right = all.but(agent).filter(
                                           function(ag) {
                                               var hdg = Math.angleNormalize(Math.atan2(ag.y - agent.y, ag.x - agent.x));
                                               if (hdg < Math.pi/2) {
                                                   if (hdg > - Math.pi/2)
                                                       return true;
                                               }
                                               return false;
                                           }
                                           );

          #print(agent.name, "LEFT", left);
          #print(agent.name, "RIGHT", right);

          var nearest_left = left.minimum(
                                          function(ag) {
                                              var d = Math.hypot(agent.x - ag.x, agent.y - ag.y);
                                              return d;
                                          });
          var nearest_right = right.minimum(
                                            function(ag) {
                                                var d = Math.hypot(agent.x - ag.x, agent.y - ag.y);
                                                return d;
                                            });

          #print(agent.name, "NEAREST-LEFT", nearest_left);
          #print(agent.name, "NEAREST-RIGHT", nearest_right);

          var d_left = 0;
          var d_right = 0;

          if (nearest_left != none)
              d_left = - Math.hypot(agent.x - nearest_left.x, agent.y - nearest_left.y);

          if (nearest_right != none)
              d_right = Math.hypot(agent.x - nearest_right.x, agent.y - nearest_right.y);

          var d = (d_left + d_right) / 2;
          #print(agent.name, d);

          agent.loc_vy = 0;
          if (dist_from_line < 40) {
              if (Math.fabs(d) > 10) {
                  var v = - d * 0.2;
                  agent.loc_vy = Control.saturate(v, -10, 10);
              }
              else if (Math.fabs(d) < 5) {
                  var v = 100 / (d*d);
                  agent.loc_vy = Control.saturate(v, -10, 10);
              }
          }

          wait(0.1);
      }
  }
}

