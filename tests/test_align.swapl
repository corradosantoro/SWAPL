

var Random = { uniform : @pythonlink "random.uniform" };

var Math = { pi : @pythonlink "math.pi",
             fabs : @pythonlink "math.fabs",
             sqrt : @pythonlink "math.sqrt",
             atan2 : @pythonlink "math.atan2" };

model "base_agent";

roleset ( { name : "leader" },
          { name : "follower" } );

agentset ( { name : "leader", role : "leader" },
           { spawn : 4, role : "follower" } );

var THRESHOLD = Math.pi / 6;

function normalize(angle) {
    while (angle > Math.pi) angle = angle - 2*Math.pi;
    while (angle < -Math.pi) angle = angle + 2*Math.pi;
    return angle;
}

function line_for_point(m, x, y) {
    var q = y - m * x;
    return { m : m,  q: q};
}

function distance_from_line(line, x, y) {
    var num = Math.fabs(y - (line.m * x + line.q));
    var den = Math.sqrt(1 + line.m * line.m);
    return num / den;
}



behaviour main {

  with roles("leader") {
    this.x = 300;
    this.y = 300;
    this.heading = 3.14159/4.0;
    this.image = "arrow_red.png";
  }

  with roles("follower") {
    this.x = 300 + Random.uniform(-100, 100);
    this.y = 300 + Random.uniform(-100, 100);
    this.heading = Random.uniform(0, 3);
  }

  with roles("leader") {
      this.v = 8;
      while (1) {
          wait(5);
          this.heading = normalize(Random.uniform(0, 2*3.14159));
      }
  }
  |
  with roles("follower") {
    var leader = role("leader");
    while (1) {
      var k_hdg = 1.5;
      var k_v = 5;

      # rule 1 alignment
      var align_difference = normalize(leader.heading - this.heading);
      this.w = k_hdg * align_difference;

      # rule 2 cohesion
      var formation_line_hdg = normalize(leader.heading + Math.pi/2);
      var line = line_for_point(formation_line_hdg, leader.x, leader.y);
      var d = distance_from_line(line, this.x, this.y);

      var dx = leader.x - this.x;
      var dy = leader.y - this.y;
      var hdg_difference = normalize(formation_line_hdg - Math.atan2(dy, dx));

      var v = 0;
      if (Math.fabs(align_difference) < THRESHOLD) {
          v = k_v * hdg_difference;
      }
      this.v = v;

      wait(0.1);
    }
  }
}

