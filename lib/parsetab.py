
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftEEQUALrightUMINUSAGENTATTRSET AGENTSET ALL BEGIN BEHAVIOUR COLON COMMA DIVIDE DOT EEQUAL END EQUAL LIST LPAREN MINUS MODEL NAME NUMBER ONE PIPE PLUS ROLESET RPAREN SEMICOLON SET STRING TIMES VAR WITH program : agent_model role_set agent_set agent_attr_set b_bodies  agent_model : MODEL STRING SEMICOLON  role_set : ROLESET LPAREN role_set_statement RPAREN SEMICOLON  role_set_statement : role_set_statement COMMA  role_def  role_set_statement : role_def  role_def : BEGIN nameval_pairs END  agent_set : AGENTSET LPAREN role_set_statement RPAREN SEMICOLON  agent_attr_set : AGENTATTRSET literal_list_set_statement SEMICOLON literal_list_set_statement : LPAREN literal_list RPARENliteral_list : NAME COMMA literal_listliteral_list : NAME b_bodies : b_bodies b_body  b_bodies : b_body  b_body : BEHAVIOUR NAME BEGIN with_list END assign : VAR NAME EQUAL expr SEMICOLON  assign : NAME EQUAL expr SEMICOLON  assign : VAR NAME SEMICOLON  assign : NAME DOT NAME EQUAL expr SEMICOLON  with_list : with_list with_block  with_list : with_block  with_block : WITH with_set BEGIN statements END  with_set : ALL  with_set : ONE  statements : statements statement  statements : statement  statement : assign\n                  | funcall  funcall : NAME list_set_statement SEMICOLON expr : MINUS expr %prec UMINUSexpr : expr PLUS exprexpr : expr MINUS exprexpr : expr TIMES exprexpr : expr DIVIDE exprexpr : expr EEQUAL exprexpr : LPAREN expr RPARENexpr : SET list_set_statementexpr : LIST list_set_statementlist_set_statement : LPAREN set_expr_list RPARENset_expr_list : expr COMMA set_expr_listset_expr_list : exprexpr : BEGIN nameval_pairs END nameval_pairs : nameval_pairs COMMA nameval_pair  nameval_pairs : nameval_pair  nameval_pair : NAME COLON expr expr : NAMEexpr : NUMBERexpr : STRINGexpr : NAME DOT NAME'
    
_lr_action_items = {'LIST':([30,40,43,55,60,61,62,63,64,85,98,100,106,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'AGENTSET':([6,32,],[9,-3,]),'STRING':([1,30,40,43,55,60,61,62,63,64,85,98,100,106,],[4,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'ALL':([66,],[80,]),'VAR':([86,89,90,92,93,96,101,104,107,108,110,],[88,88,-27,-26,-25,-24,-17,-28,-16,-15,-18,]),'WITH':([52,67,68,83,95,],[66,-20,66,-19,-21,]),'TIMES':([42,44,47,48,53,54,56,59,70,71,72,73,74,75,76,77,78,84,103,105,109,],[-47,-45,61,-46,-29,-37,61,-36,61,-35,-48,-41,61,-32,61,-34,-33,-38,61,61,61,]),'MODEL':([0,],[1,]),'PLUS':([42,44,47,48,53,54,56,59,70,71,72,73,74,75,76,77,78,84,103,105,109,],[-47,-45,62,-46,-29,-37,62,-36,62,-35,-48,-41,-31,-32,-30,-34,-33,-38,62,62,62,]),'NAME':([12,23,26,28,30,40,43,45,50,55,57,60,61,62,63,64,85,86,88,89,90,92,93,96,97,98,100,101,104,106,107,108,110,],[18,34,38,18,44,44,44,18,34,44,72,44,44,44,44,44,44,91,94,91,-27,-26,-25,-24,102,44,44,-17,-28,44,-16,-15,-18,]),'BEGIN':([8,14,20,30,38,40,43,55,60,61,62,63,64,79,80,81,85,98,100,106,],[12,12,12,45,52,45,45,45,45,45,45,45,45,86,-22,-23,45,45,45,45,]),'SET':([30,40,43,55,60,61,62,63,64,85,98,100,106,],[46,46,46,46,46,46,46,46,46,46,46,46,46,]),'RPAREN':([11,13,22,29,31,34,35,42,44,48,53,54,56,59,65,69,70,71,72,73,74,75,76,77,78,84,87,],[-5,21,33,-6,-4,-11,51,-47,-45,-46,-29,-37,71,-36,-10,84,-40,-35,-48,-41,-31,-32,-30,-34,-33,-38,-39,]),'END':([17,19,39,42,44,47,48,53,54,58,59,67,68,71,72,73,74,75,76,77,78,83,84,89,90,92,93,95,96,101,104,107,108,110,],[29,-43,-42,-47,-45,-44,-46,-29,-37,73,-36,-20,82,-35,-48,-41,-31,-32,-30,-34,-33,-19,-38,95,-27,-26,-25,-21,-24,-17,-28,-16,-15,-18,]),'EEQUAL':([42,44,47,48,53,54,56,59,70,71,72,73,74,75,76,77,78,84,103,105,109,],[-47,-45,63,-46,-29,-37,63,-36,63,-35,-48,-41,63,63,63,-34,63,-38,63,63,63,]),'DIVIDE':([42,44,47,48,53,54,56,59,70,71,72,73,74,75,76,77,78,84,103,105,109,],[-47,-45,64,-46,-29,-37,64,-36,64,-35,-48,-41,64,-32,64,-34,-33,-38,64,64,64,]),'MINUS':([30,40,42,43,44,47,48,53,54,55,56,59,60,61,62,63,64,70,71,72,73,74,75,76,77,78,84,85,98,100,103,105,106,109,],[40,40,-47,40,-45,60,-46,-29,-37,40,60,-36,40,40,40,40,40,60,-35,-48,-41,-31,-32,-30,-34,-33,-38,40,40,40,60,60,40,60,]),'$end':([2,25,27,37,82,],[0,-1,-13,-12,-14,]),'LPAREN':([5,9,15,30,40,41,43,46,55,60,61,62,63,64,85,91,98,100,106,],[8,14,23,43,43,55,43,55,43,43,43,43,43,43,43,55,43,43,43,]),'SEMICOLON':([4,21,24,33,42,44,48,51,53,54,59,71,72,73,74,75,76,77,78,84,94,99,103,105,109,],[7,32,36,49,-47,-45,-46,-9,-29,-37,-36,-35,-48,-41,-31,-32,-30,-34,-33,-38,101,104,107,108,110,]),'AGENTATTRSET':([10,49,],[15,-7,]),'EQUAL':([91,94,102,],[98,100,106,]),'BEHAVIOUR':([16,25,27,36,37,82,],[26,26,-13,-8,-12,-14,]),'COMMA':([11,13,17,19,22,29,31,34,39,42,44,47,48,53,54,58,59,70,71,72,73,74,75,76,77,78,84,],[-5,20,28,-43,20,-6,-4,50,-42,-47,-45,-44,-46,-29,-37,28,-36,85,-35,-48,-41,-31,-32,-30,-34,-33,-38,]),'ROLESET':([3,7,],[5,-2,]),'COLON':([18,],[30,]),'NUMBER':([30,40,43,55,60,61,62,63,64,85,98,100,106,],[48,48,48,48,48,48,48,48,48,48,48,48,48,]),'ONE':([66,],[81,]),'DOT':([44,91,],[57,97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'nameval_pairs':([12,45,],[17,58,]),'with_block':([52,68,],[67,83,]),'agent_attr_set':([10,],[16,]),'funcall':([86,89,],[90,90,]),'nameval_pair':([12,28,45,],[19,39,19,]),'program':([0,],[2,]),'b_bodies':([16,],[25,]),'set_expr_list':([55,85,],[69,87,]),'statements':([86,],[89,]),'assign':([86,89,],[92,92,]),'literal_list':([23,50,],[35,65,]),'agent_set':([6,],[10,]),'with_set':([66,],[79,]),'expr':([30,40,43,55,60,61,62,63,64,85,98,100,106,],[47,53,56,70,74,75,76,77,78,70,103,105,109,]),'role_def':([8,14,20,],[11,11,31,]),'list_set_statement':([41,46,91,],[54,59,99,]),'literal_list_set_statement':([15,],[24,]),'b_body':([16,25,],[27,37,]),'agent_model':([0,],[3,]),'statement':([86,89,],[93,96,]),'role_set':([3,],[6,]),'with_list':([52,],[68,]),'role_set_statement':([8,14,],[13,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> agent_model role_set agent_set agent_attr_set b_bodies','program',5,'p_program','swapl.py',33),
  ('agent_model -> MODEL STRING SEMICOLON','agent_model',3,'p_agent_model','swapl.py',42),
  ('role_set -> ROLESET LPAREN role_set_statement RPAREN SEMICOLON','role_set',5,'p_role_set','swapl.py',49),
  ('role_set_statement -> role_set_statement COMMA role_def','role_set_statement',3,'p_role_set_statement_1','swapl.py',54),
  ('role_set_statement -> role_def','role_set_statement',1,'p_role_set_statement_2','swapl.py',59),
  ('role_def -> BEGIN nameval_pairs END','role_def',3,'p_role_def','swapl.py',63),
  ('agent_set -> AGENTSET LPAREN role_set_statement RPAREN SEMICOLON','agent_set',5,'p_agent_set','swapl.py',72),
  ('agent_attr_set -> AGENTATTRSET literal_list_set_statement SEMICOLON','agent_attr_set',3,'p_agent_attr_set','swapl.py',81),
  ('literal_list_set_statement -> LPAREN literal_list RPAREN','literal_list_set_statement',3,'p_literal_listset','swapl.py',88),
  ('literal_list -> NAME COMMA literal_list','literal_list',3,'p_literal_list_1','swapl.py',92),
  ('literal_list -> NAME','literal_list',1,'p_literal_list_2','swapl.py',97),
  ('b_bodies -> b_bodies b_body','b_bodies',2,'p_b_bodies_1','swapl.py',102),
  ('b_bodies -> b_body','b_bodies',1,'p_b_bodies_2','swapl.py',106),
  ('b_body -> BEHAVIOUR NAME BEGIN with_list END','b_body',5,'p_b_body','swapl.py',110),
  ('assign -> VAR NAME EQUAL expr SEMICOLON','assign',5,'p_assing_1','swapl.py',118),
  ('assign -> NAME EQUAL expr SEMICOLON','assign',4,'p_assing_2','swapl.py',122),
  ('assign -> VAR NAME SEMICOLON','assign',3,'p_assing_3','swapl.py',126),
  ('assign -> NAME DOT NAME EQUAL expr SEMICOLON','assign',6,'p_assing_4','swapl.py',130),
  ('with_list -> with_list with_block','with_list',2,'p_with_list_1','swapl.py',138),
  ('with_list -> with_block','with_list',1,'p_with_list_2','swapl.py',142),
  ('with_block -> WITH with_set BEGIN statements END','with_block',5,'p_with_block','swapl.py',149),
  ('with_set -> ALL','with_set',1,'p_with_set_1','swapl.py',156),
  ('with_set -> ONE','with_set',1,'p_with_set_2','swapl.py',160),
  ('statements -> statements statement','statements',2,'p_statements_1','swapl.py',167),
  ('statements -> statement','statements',1,'p_statements_2','swapl.py',171),
  ('statement -> assign','statement',1,'p_statement','swapl.py',175),
  ('statement -> funcall','statement',1,'p_statement','swapl.py',176),
  ('funcall -> NAME list_set_statement SEMICOLON','funcall',3,'p_funcall','swapl.py',183),
  ('expr -> MINUS expr','expr',2,'p_uminus_expr','swapl.py',192),
  ('expr -> expr PLUS expr','expr',3,'p_p_expr','swapl.py',196),
  ('expr -> expr MINUS expr','expr',3,'p_m_expr','swapl.py',200),
  ('expr -> expr TIMES expr','expr',3,'p_t_expr','swapl.py',204),
  ('expr -> expr DIVIDE expr','expr',3,'p_d_expr','swapl.py',208),
  ('expr -> expr EEQUAL expr','expr',3,'p_eequal','swapl.py',212),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expression_group','swapl.py',216),
  ('expr -> SET list_set_statement','expr',2,'p_set_expr','swapl.py',220),
  ('expr -> LIST list_set_statement','expr',2,'p_list_expr','swapl.py',225),
  ('list_set_statement -> LPAREN set_expr_list RPAREN','list_set_statement',3,'p_listset','swapl.py',231),
  ('set_expr_list -> expr COMMA set_expr_list','set_expr_list',3,'p_set_expr_list_1','swapl.py',235),
  ('set_expr_list -> expr','set_expr_list',1,'p_set_expr_list_2','swapl.py',240),
  ('expr -> BEGIN nameval_pairs END','expr',3,'p_struct','swapl.py',245),
  ('nameval_pairs -> nameval_pairs COMMA nameval_pair','nameval_pairs',3,'p_namevals_1','swapl.py',251),
  ('nameval_pairs -> nameval_pair','nameval_pairs',1,'p_namevals_2','swapl.py',257),
  ('nameval_pair -> NAME COLON expr','nameval_pair',3,'p_nameval','swapl.py',261),
  ('expr -> NAME','expr',1,'p_val_expr','swapl.py',266),
  ('expr -> NUMBER','expr',1,'p_num_expr','swapl.py',270),
  ('expr -> STRING','expr',1,'p_string_expr','swapl.py',274),
  ('expr -> NAME DOT NAME','expr',3,'p_field_expr','swapl.py',278),
]
